# coding: utf-8

"""
    Multilogin X Profile Management

    Multilogin X Profile Management API allows you to manage profiles.

    The version of the OpenAPI document: 1.0.0
    Contact: support@multilogin.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from models.MLX.browser_type import BrowserType
from typing import Optional, Set
from typing_extensions import Self

class ProfileSearchCriteria(BaseModel):
    """
    ProfileSearchCriteria
    """ # noqa: E501
    offset: Annotated[int, Field(le=10000, strict=True, ge=0)]
    limit: Annotated[int, Field(le=100, strict=True, ge=1)]
    search_text: Annotated[str, Field(strict=True, max_length=50)]
    storage_type: StrictStr
    browser_type: Optional[BrowserType] = None
    os_type: Optional[StrictStr] = None
    core_version: Optional[StrictInt] = None
    is_removed: StrictBool
    folder_id: Optional[StrictStr] = Field(default=None, description="Folder ID to filter profiles by")
    order_by: Optional[StrictStr] = Field(default=None, description="field used for sorting")
    sort: Optional[StrictStr] = Field(default=None, description="sorting direction, asc or desc")
    __properties: ClassVar[List[str]] = ["offset", "limit", "search_text", "storage_type", "browser_type", "os_type", "core_version", "is_removed", "folder_id", "order_by", "sort"]

    @field_validator('storage_type')
    def storage_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['cloud', 'local', 'all']):
            raise ValueError("must be one of enum values ('cloud', 'local', 'all')")
        return value

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['linux', 'macos', 'windows', 'android']):
            raise ValueError("must be one of enum values ('linux', 'macos', 'windows', 'android')")
        return value

    @field_validator('order_by')
    def order_by_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['name', 'created_at', 'updated_at', 'removed_at']):
            raise ValueError("must be one of enum values ('name', 'created_at', 'updated_at', 'removed_at')")
        return value

    @field_validator('sort')
    def sort_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['asc', 'desc']):
            raise ValueError("must be one of enum values ('asc', 'desc')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfileSearchCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if sort (nullable) is None
        # and model_fields_set contains the field
        if self.sort is None and "sort" in self.model_fields_set:
            _dict['sort'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfileSearchCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "offset": obj.get("offset"),
            "limit": obj.get("limit"),
            "search_text": obj.get("search_text"),
            "storage_type": obj.get("storage_type"),
            "browser_type": obj.get("browser_type"),
            "os_type": obj.get("os_type"),
            "core_version": obj.get("core_version"),
            "is_removed": obj.get("is_removed"),
            "folder_id": obj.get("folder_id"),
            "order_by": obj.get("order_by"),
            "sort": obj.get("sort")
        })
        return _obj



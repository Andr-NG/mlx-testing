# coding: utf-8

"""
    Multilogin X Profile Management

    Multilogin X Profile Management API allows you to manage profiles.

    The version of the OpenAPI document: 1.0.0
    Contact: support@multilogin.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from ctypes import Union
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Set, Union
from typing_extensions import Annotated
from models.MLX.allowed_screen_resolutions import AllowedScreenResolutions
from models.MLX.browser_type import BrowserType
from models.MLX.profile_meta_update_params import ProfileMetaUpdateParams
from typing_extensions import Self


class CreateProfile(BaseModel):
    """
    CreateProfile
    """ # noqa: E501
    name: StrictStr
    browser_type: BrowserType
    core_version: Optional[StrictInt] = None
    os_type: StrictStr
    times: Optional[Annotated[int, Field(le=20, strict=True, ge=1)]] = None
    folder_id: StrictStr
    auto_update_core: Optional[StrictBool] = None
    tags: Optional[Annotated[List[StrictStr], Field(min_length=1, max_length=10)]] = None
    notes: Optional[StrictStr] = None
    parameters: ProfileMetaUpdateParams
    allowed_screen_resolutions: Optional[AllowedScreenResolutions] = None
    __properties: ClassVar[List[str]] = ["name", "browser_type", "core_version", "os_type", "times", "folder_id", "auto_update_core", "tags", "notes", "parameters", "allowed_screen_resolutions"]

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['linux', 'macos', 'windows', 'android']):
            raise ValueError("must be one of enum values ('linux', 'macos', 'windows', 'android')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allowed_screen_resolutions
        if self.allowed_screen_resolutions:
            _dict['allowed_screen_resolutions'] = self.allowed_screen_resolutions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "browser_type": obj.get("browser_type"),
            "core_version": obj.get("core_version"),
            "os_type": obj.get("os_type"),
            "times": obj.get("times"),
            "folder_id": obj.get("folder_id"),
            "auto_update_core": obj.get("auto_update_core"),
            "tags": obj.get("tags"),
            "notes": obj.get("notes"),
            "parameters": ProfileMetaUpdateParams.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "allowed_screen_resolutions": AllowedScreenResolutions.from_dict(obj["allowed_screen_resolutions"]) if obj.get("allowed_screen_resolutions") is not None else None
        })
        return _obj


